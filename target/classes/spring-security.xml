<?xml version="1.0" encoding="UTF-8"?>
<!-- 这里使用 bean:beans，是为了在这个配置文件中，配置security相关是不用加前缀，但是配置bean时，也需要加前缀。因为在这个配置文件中要配置security的会比较多-->
<bean:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:bean="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 不带前缀的配置，都是security相关的配置 -->
	
	<!-- demo1：没有自己的登录页面，运行时spring security会自己生成一个登录页面-->
	<!-- security的页面拦截规则, use-expressions表示是否启用SPEL表达式，默认是true -->
	<!-- <http use-expressions="false">
		拦截的路径： /* 表示只拦截根目录下的资源，不包括它子目录的资源； /** 就是包括所有的资源
		access 配置security的角色名，security规定角色名必须是ROLE_开头的（如果上面不配置use-expressions=false，这里就要写成 hasRole(ROLE_USER')）
		<intercept-url pattern="/**" access="ROLE_USER"/>
		开启表单登录功能
		<form-login/>
	</http>

	认证管理器
	<authentication-manager>
		认证的提供者
		<authentication-provider>
			<user-service>
				user用来配置当前系统的用户，name就是用户的name，authorities是角色名
				这个配置的意思是：配置一个用户admin，密码是123456，角色是ROLE_USER，如果admin登录之后，就能访问ROLE_USER这个角色配置的资源，如果不是这个用户登录，或者没有登录，就不能访问
				<user name="admin" password="123456" authorities="ROLE_USER"/>			
			</user-service>
		</authentication-provider>
	</authentication-manager> -->
	
	
	
	<!-- demo2：采用自己的登录页面 -->
	
	<!-- 以下页面不登录也能访问 -->
	<http pattern="/login.html" security="none"/>
	<http pattern="/login_error.html" security="none"/>
	
	<!-- security的页面拦截规则, use-expressions表示是否启用SPEL表达式，默认是true -->
	<http use-expressions="false">
		<!-- 拦截的路径： /* 表示只拦截根目录下的资源，不包括它子目录的资源； /** 就是包括所有的资源 -->
		<!-- access 配置security的角色名，security规定角色名必须是ROLE_开头的（如果上面不配置use-expressions=false，这里就要写成 hasRole(ROLE_USER')） -->
		<intercept-url pattern="/**" access="ROLE_USER"/>
		<!-- 开启表单登录功能（如果采用自己的登录页面，则用户名和密码的两个input的name默认是username、password，可以修改，但是这里不修改） -->
		<!-- login-page: 指定自己定义的登录页面 -->
		<!-- default-target-url: 登录成功后跳转的页面 -->
		<!-- login_error.html: 登录失败后跳转的页面 -->
		<form-login login-page="/login.html" 
					default-target-url="/index.html"
					authentication-failure-forward-url="/login_error.html"/>
		<!-- 关闭 csrf 拦截 -->
		<csrf disabled="true"/>
	</http>

	<!-- 认证管理器 -->
	<authentication-manager>
		<!-- 认证的提供者 -->
		<authentication-provider>
			<user-service>
				<!-- user用来配置当前系统的用户，name就是用户的name，authorities是角色名 -->
				<!-- 这个配置的意思是：配置一个用户admin，密码是123456，角色是ROLE_USER，如果admin登录之后，就能访问ROLE_USER这个角色配置的资源，如果不是这个用户登录，或者没有登录，就不能访问 -->
				<user name="admin" password="123456" authorities="ROLE_USER"/>			
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
</bean:beans>